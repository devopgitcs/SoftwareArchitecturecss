name: Deploy .NET 4.7.2 Console App as a Continuous WebJob (OIDC)

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # 1) Check that required secrets exist
  check-secrets:
    runs-on: windows-latest
    outputs:
      secrets-valid: ${{ steps.secrets-valid.outputs.isvalid }}
    steps:
      - uses: actions/checkout@v3

      - id: secrets-valid
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          if (-not $env:AZURE_WEBAPP_NAME -or -not $env:AZURE_SUBSCRIPTION_ID) {
            "isvalid=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            "isvalid=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
        shell: pwsh

  # 2) Build and package the .NET 4.7.2 console app as a WebJob
  build:
    runs-on: windows-latest
    needs: check-secrets
    if: needs.check-secrets.outputs.secrets-valid == 'true'
    steps:
      - uses: actions/checkout@v3

      # Set up MSBuild and NuGet
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      # Restore NuGet packages
      - name: Restore dependencies
        run: nuget restore SoftwareArchitectureConsoleAppNet_4_7_2.sln

      # Build the solution in Release mode
      - name: Build solution
        run: msbuild SoftwareArchitectureConsoleAppNet_4_7_2.sln /p:Configuration=Release

      # Prepare the folder structure for the WebJob.
      - name: Prepare WebJob folder structure
        shell: pwsh
        run: |
          # Remove any old app_data folder if it exists.
          if (Test-Path -Path ".\app_data") {
            Remove-Item -Path ".\app_data" -Recurse -Force
          }
          # Create the continuous WebJob folder
          New-Item -ItemType Directory -Force -Path "app_data\jobs\continuous\MyConsoleJob"

          # Adjust this path if your project outputs elsewhere
          $sourcePath = ".\Module2Lab4\bin\Release\"
          if (-Not (Test-Path $sourcePath)) {
            Write-Error "Source path $sourcePath not found."
            exit 1
          }
          Write-Host "Copying files from $sourcePath to app_data\jobs\continuous\MyConsoleJob"
          Copy-Item -Path "$sourcePath*" -Destination "app_data\jobs\continuous\MyConsoleJob" -Recurse -Force

          # Debug: List the folder structure
          Write-Host "Contents of app_data\jobs\continuous\MyConsoleJob:"
          Get-ChildItem -Path "app_data\jobs\continuous\MyConsoleJob" -Recurse

      # Archive (zip) the app_data folder so that it contains the WebJob structure.
      - name: Archive for WebJob deployment
        shell: pwsh
        run: |
          Compress-Archive -Path .\app_data\* -DestinationPath webjob.zip -Force
          Write-Host "Created webjob.zip. Unzipping for verification:"
          Expand-Archive -Path webjob.zip -DestinationPath unzipped -Force
          Get-ChildItem -Path unzipped -Recurse

      # Upload the zip artifact for deployment.
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: webjob-artifact
          path: webjob.zip

  # 3) Deploy the WebJob package to Azure Web App
  deploy:
    runs-on: windows-latest
    needs: [build, check-secrets]
    if: needs.check-secrets.outputs.secrets-valid == 'true'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: webjob-artifact

      # Login to Azure using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v1.5.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy the zip that contains the app_data folder (and thus your WebJob)
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: webjob.zip
          enable-oryx-build: false  # Ensures the package is just unzipped

      # No health check for a background WebJob
