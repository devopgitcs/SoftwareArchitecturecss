name: Deploy .NET 4.7.2 Console App as a WebJob (OIDC)

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # 1) Check that required secrets exist
  check-secrets:
    runs-on: windows-latest
    outputs:
      secrets-valid: ${{ steps.secrets-valid.outputs.isvalid }}
    steps:
      - uses: actions/checkout@v3

      - id: secrets-valid
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          if (-not $env:AZURE_WEBAPP_NAME -or -not $env:AZURE_SUBSCRIPTION_ID) {
            "isvalid=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            "isvalid=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
        shell: pwsh

  # 2) Build and package the .NET 4.7.2 console app
  build:
    runs-on: windows-latest
    needs: check-secrets
    if: needs.check-secrets.outputs.secrets-valid == 'true'
    steps:
      - uses: actions/checkout@v3

      # Set up MSBuild and NuGet
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      # Restore NuGet packages for the solution
      - name: Restore dependencies
        run: nuget restore SoftwareArchitectureConsoleAppNet_4_7_2.sln

      # Build the solution using MSBuild (outputs will be in each project's default output folder)
      - name: Build solution
        run: msbuild SoftwareArchitectureConsoleAppNet_4_7_2.sln /p:Configuration=Release

      # Create a folder structure for a continuous WebJob:
      #   app_data/jobs/continuous/MyConsoleJob
      # Then copy your console app's release output into that folder.
      - name: Prepare WebJob folder structure
        shell: pwsh
        run: |
          # Remove any old folder if it exists
          if (Test-Path -Path ".\app_data") {
            Remove-Item -Path ".\app_data" -Recurse -Force
          }

          # Create the continuous WebJob folder
          New-Item -ItemType Directory -Force -Path app_data\jobs\continuous\MyConsoleJob

          # Locate your console app .exe in the Release folder
          $exePath = Get-ChildItem -Path . -Recurse -Filter "*.exe" | Where-Object { $_.FullName -match "Release" } | Select-Object -First 1
          if ($null -eq $exePath) {
            Write-Error "Could not find any .exe in a Release folder."
            exit 1
          } else {
            $outputFolder = Split-Path $exePath.FullName -Parent
            Write-Host "Found console app folder: $outputFolder"
            # Copy everything from that folder into the WebJob folder
            Copy-Item -Path "$outputFolder\*" -Destination ".\app_data\jobs\continuous\MyConsoleJob" -Recurse -Force
          }

      # Zip the entire site folder (which now contains app_data/jobs/...)
      - name: Archive for WebJobs deployment
        shell: pwsh
        run: |
          Compress-Archive -Path .\app_data\* -DestinationPath webjob.zip -Force

      # Upload artifact for the deployment job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webjob-artifact
          path: webjob.zip

  # 3) Deploy to Azure Web App
  deploy:
    runs-on: windows-latest
    needs: [build, check-secrets]
    if: needs.check-secrets.outputs.secrets-valid == 'true'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: webjob-artifact

      # OIDC-based Azure login
      - name: Azure Login (OIDC)
        uses: azure/login@v1.5.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy the ZIP that contains app_data/jobs/continuous/MyConsoleJob
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: webjob.zip

      # Optional: Since this is a console app, there's no default page to check.
      # You could remove or skip the health check, or check that the WebJob started successfully.
